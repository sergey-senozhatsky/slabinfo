TL;DL
===============================================================================

A quick tutorial

To start collecting samples (note sudo)
 sudo slabinfo-stats.sh -r FILE1

^C or reboot

Pre-process records file(s) (this will also generate graphs)
 gnuplotter.sh -p FILE1 [FILE2 ... FILEN]


If you want to regenerate graph individually (e.g. with -r 100,200) then
do (for example):
 gnuplotter.sh -r 100,200 -l FILE1-slabs-by-loss

To collect another samples (e.g. record file FILE2) and to visually compare
two record files (e.g. FILE1 and FILE2), do

sudo ./slabinfo-stats.sh -r FILE2
 gnuplotter.sh -p FILE2
^C
 gnuplotter.sh -t FILE1 FILE2

etc.

gnuplotter.sh -p | -l | -t    accept any number of RECORD files.


USAGE
===============================================================================

First, we need to collect samples that later will be pre-process and used by a
plotting program. Different scripts are used for those tasks, because the basic
design is not to stick to a one and only plotting program, but instead provide
an ability to implement support for any plotting back-end (gnuplot, PLplot,
etc.) that fits your own needs. Apart from that, this split lets you to collect
samples on a target and to generate plots on a host pc (your target may be
missing gnuplot, etc.).

slabinfo-stats.sh is just a wrapper around slabinfo tool, which is used to
collect the data.

NOTE:
slabinfo tool must be patched in order to provide extended stats and info.
Find the kernel patches in kernel_patches/ directory.


To record samples, execute
slabinfo-stats.sh -r FILE


Other options:
-n %d 	- tell slabinfo to print only %d first slabs in stats tables
-s %d	- sleep timeout between samples


The rest is handled by plotting scripts.


GENERATING A PLOT
===============================================================================

As of now, only gnuplot supported by gnuplotter.sh script:

 -p
   Pre-process files

 -l
   Generate plot based on "Slabs sorted by FOO" slabinfo output (both 'sort by
   loss' and 'sort by size' files)

   This script handles files with *-slabs-by-loss or
   *-slabs-by-size in their names.

 -t
   Generate plot based on Total "Memory usage and Loss" slabinfo output

   This script handles files with *-totals in their names.

NOTE:
 -p -t -l   Accepts files as agruments, not as options.


 -r %d,%d
 This option specifies a range of samples to be plotted. It basically scales
 the graph for more detailed investigation and at the same  helps when the
 number of samples is too high to be plotted nicely.
 See
	examples/gcc-slabs-by-loss-full.png
	examples/gcc-slabs-by-loss-r1400x1600.png
	examples/gcc-slabs-by-loss-r1450,1500.png

 -s %d,%d
 This option lets to redefine generated image width and heigh (pixels)


SAMPLES
===============================================================================

Samples contain:
-- slabinto -T reporting part
-- slabinfo `Slabs sorted by size' and `Slabs sorted by loss' tables


EXAMPLE:

Slabcache Totals
----------------
Slabcaches :              91   Aliases  :         119->69   Active:     68
Memory used:       215023616   # Loss   :         9009360   MRatio:     4%
# Objects  :          373710   # PartObj:            4531   ORatio:     1%

Per Cache         Average              Min              Max            Total
----------------------------------------------------------------------------
#Objects             5495               11            94472           373710
#Slabs                201                1             4188            13708
#PartSlab               3                0              103              212
%PartSlab              2%               0%              51%               1%
PartObjs                1                0             2246             4531
% PartObj              1%               0%              41%               1%
Memory            3162112             8192        137232384        215023616
Used              3029621             7920        130866624        206014256
Loss               132490                0          6365760          9009360

Per Object        Average              Min              Max
-----------------------------------------------------------
Memory                553                8             8192
User                  551                8             8192
Loss                    2                0               64

Slabs sorted by size
--------------------
Name                   Objects Objsize           Space Slabs/Part/Cpu  O/S O %Fr %Ef Flg
ext4_inode_cache         75384    1736       137232384      4178/0/10   18 3   0  95 a

Slabs sorted by loss
--------------------
Name                   Objects Objsize            Loss Slabs/Part/Cpu  O/S O %Fr %Ef Flg
ext4_inode_cache         75384    1736         6365760      4178/0/10   18 3   0  95 a



Sergey Senozhatsky, 2015
